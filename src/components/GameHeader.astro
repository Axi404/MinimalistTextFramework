---
// Game header component with cyberpunk terminal style
---

<div class="terminal-header">
    <div class="data-particles"></div>
    <div class="terminal-controls">
        <span class="control control-close">
            <span class="control-inner"></span>
        </span>
        <span class="control control-minimize">
            <span class="control-inner"></span>
        </span>
        <span class="control control-maximize">
            <span class="control-inner"></span>
        </span>
        <div class="system-info">
            <span class="cpu-usage cyber-mono text-accent" id="cpu-usage">CPU: 42%</span>
            <span class="memory-usage cyber-mono text-accent" id="memory-usage">RAM: 68%</span>
        </div>
    </div>
    <div class="terminal-title">
        <div class="title-container">
            <span class="title-prefix cyber-title text-secondary">NEXUS-TERM</span>
            <span class="title-cursor text-secondary blink-animation">|</span>
        </div>
        <div class="version-container">
            <span class="version cyber-mono text-accent" id="version">v2.0.77</span>
            <span class="build-info cyber-mono" id="build-info">BUILD-4A7E</span>
        </div>
    </div>
    <div class="terminal-status">
        <div class="status-grid">
            <span class="status-indicator status-online"></span>
            <span class="status-text text-success cyber-mono">CONNECTED</span>
            <div class="signal-bars">
                <span class="bar"></span>
                <span class="bar"></span>
                <span class="bar"></span>
                <span class="bar"></span>
            </div>
        </div>
        <div class="data-transfer cyber-mono">
            <span class="transfer-rate text-primary" id="upload-rate">↑ 1.2MB/s</span>
            <span class="transfer-rate text-primary" id="download-rate">↓ 3.4MB/s</span>
        </div>
    </div>
</div>

<script>
    // 动态数据更新
    function updateHeaderData() {
        // CPU使用率动态变化 (20-90%)
        const cpuElement = document.getElementById("cpu-usage");
        if (cpuElement) {
            const cpuUsage = Math.floor(Math.random() * 70) + 20; // 20-90
            cpuElement.textContent = `CPU: ${cpuUsage}%`;
        }

        // 内存使用率动态变化 (40-95%)
        const memoryElement = document.getElementById("memory-usage");
        if (memoryElement) {
            const memoryUsage = Math.floor(Math.random() * 55) + 40; // 40-95
            memoryElement.textContent = `RAM: ${memoryUsage}%`;
        }

        // 上传速度动态变化 (0.1-9.9MB/s)
        const uploadElement = document.getElementById("upload-rate");
        if (uploadElement) {
            const uploadSpeed = (Math.random() * 9.8 + 0.1).toFixed(1);
            uploadElement.textContent = `↑ ${uploadSpeed}MB/s`;
        }

        // 下载速度动态变化 (0.5-15.9MB/s)
        const downloadElement = document.getElementById("download-rate");
        if (downloadElement) {
            const downloadSpeed = (Math.random() * 9.4 + 0.5).toFixed(1);
            downloadElement.textContent = `↓ ${downloadSpeed}MB/s`;
        }
    }

    // 版本号偶尔更新 (更低频率)
    function updateVersionInfo() {
        const versionElement = document.getElementById("version");
        const buildElement = document.getElementById("build-info");

        if (versionElement && buildElement) {
            // 随机更新版本的最后一位数字
            const majorVersion = 2;
            const minorVersion = 0;
            const patchVersion = Math.floor(Math.random() * 99) + 50; // 50-99
            versionElement.textContent = `v${majorVersion}.${minorVersion}.${patchVersion}`;

            // 随机生成构建ID
            const buildChars = "0123456789ABCDEF";
            let buildId = "BUILD-";
            for (let i = 0; i < 4; i++) {
                buildId += buildChars.charAt(
                    Math.floor(Math.random() * buildChars.length),
                );
            }
            buildElement.textContent = buildId;
        }
    }

    // 启动动态更新
    document.addEventListener("DOMContentLoaded", function () {
        // 每2秒更新一次系统数据
        setInterval(updateHeaderData, 2000);

        // 每30秒更新一次版本信息
        setInterval(updateVersionInfo, 30000);

        // 立即执行一次更新
        updateHeaderData();
    });
</script>
